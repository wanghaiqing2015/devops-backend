apiVersion: v1
kind: Namespace
metadata:
   name: devops
   labels:
     name: devops
---
kind: Service
apiVersion: v1
metadata:
  name: devops-backend
  namespace: devops
spec:
  selector:
    app: devops-backend
  type: NodePort
  ports:
    - protocol: TCP
      port: 8000       #port是k8s集群内部访问service的端口，即通过clusterIP:port可以访问到某个service
      targetPort: 8000 #容器的端口(最根本的端口)，与制作容器时暴露的端口一致(DockerFile中EXPOSE)
      nodePort: 30005   #nodePort是外部访问k8s集群中service的端口，通过nodeIP:nodePort可以从外部访问到某个service;有效端口范围:30000-32767
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-backend
  namespace: devops
  labels:
    app: devops-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: devops-backend
  template:
    metadata:
      labels:
        app: devops-backend
    spec:
      imagePullSecrets:
        - name: private-repository
      containers:
        - name: devops-backend         #pod的名称，必须字段，名称唯一且对象创建后不可以被修改
          image: ${CICD_IMAGE}:${CICD_EXECUTION_SEQUENCE}  #镜像仓库的路径/镜像的名称:镜像的标签
          imagePullPolicy: Always  #Always(总是去仓库下载),Never(从不去仓库下载),IfNotPresent(如果本地没有就去仓库下载),默认是"IfNotPresent"
          ports:
            - containerPort: 8000 #containerPort是pod内部容器的端口，targetPort映射到containerPort;例如，mysql服务需要暴露3306端口，redis暴露6379端口
          volumeMounts:
            - mountPath: /etc/localtime
              name: tz-config
          env:
            - name: TZ
              value: Asia/Shanghai
          resources:
            requests:
              memory: 512Mi
            limits:
              memory: 2Gi
      volumes:
        - name: tz-config
          hostPath:
            path: /etc/localtime
            type: ""